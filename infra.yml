---
#service account for kubernetes-dashboard
apiVersion: v1
kind: ServiceAccount
metadata:
  name: kubernetes-dashboard
  namespace: kubernetes-dashboard
---
#cluster role for kubernetes-dashboard
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: kubernetes-dashboard
rules:
  # allow any action on any api
  - apiGroups: ["*"]
    resources: ["*"]
    verbs: ["*"]
  # allow any action on any api
  - nonResourceURLs: ["*"]
    verbs: ["*"]
#cluster role for kubernetes-dashboard
---
#cluster role binding for kubernetes-dashboard
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: kubernetes-dashboard
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: kubernetes-dashboard
subjects:
  - kind: ServiceAccount
    name: kubernetes-dashboard
    namespace: kubernetes-dashboard
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: faas-api-role
rules:
  - apiGroups: ["serving.knative.dev"]
    resources: ["services"]
    verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]
  - apiGroups: [""]
    resources: ["pods", "namespaces"]
    verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]
  - apiGroups: [""]
    resources: ["pods/log"]
    verbs: ["get", "list", "watch"]
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: faas-api
  namespace: default
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: faas-api-rolebinding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: faas-api-role
subjects:
  - kind: ServiceAccount
    name: faas-api
    namespace: default
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: faas-frontend
  labels:
    app: faas-frontend
spec:
  replicas: 1
  selector:
    matchLabels:
      app: faas-frontend
  template:
    metadata:
      labels:
        app: faas-frontend
    spec:
      containers:
        - name: faas-frontend
          image: nginx:1.14.2
          ports:
            - containerPort: 80
          resources:
            requests:
              memory: "64Mi"
              cpu: "250m"
            limits:
              memory: "128Mi"
              cpu: "500m"
          volumeMounts:
            - name: faas-html
              mountPath: /usr/share/nginx/html
      volumes:
        - name: faas-html
          configMap:
            name: faas-html
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: faas-api-env
data:
  DOCKER_REGISTRY: "index.docker.io"
---
apiVersion: v1
kind: Secret
metadata:
  name: faas-api-secret
type: Opaque
data:
  DOCKER_USERNAME: ""
  DOCKER_PASSWORD: ""
  AUTH0_CLIENT_ID: ""
  AUTH0_DOMAIN: ""
  AUTH0_CLIENT_SECRET: ""
  AUTH0_CALLBACK_URL: ""
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: faas-api
spec:
  replicas: 1
  selector:
    matchLabels:
      app: faas-api
  template:
    metadata:
      labels:
        app: faas-api
    spec:
      serviceAccountName: faas-api
      containers:
        - name: dind
          image: docker:20.10-dind
          securityContext:
            privileged: true
          env:
            - name: DOCKER_TLS_CERTDIR
              value: ""
          volumeMounts:
            - name: dind-data
              mountPath: /var/lib/docker
          resources:
            requests:
              cpu: "500m"
              memory: "1Gi"
            limits:
              cpu: "2"
              memory: "4Gi"

        - name: faas-api
          image: jairjosafath/faas-api:latest
          ports:
            - containerPort: 8090
          envFrom:
            - configMapRef:
                name: faas-api-env
          env:
            - name: DOCKER_HOST
              value: tcp://localhost:2375
            - name: DOCKER_USERNAME
              valueFrom:
                secretKeyRef:
                  name: faas-api-secret
                  key: DOCKER_USERNAME
            - name: DOCKER_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: faas-api-secret
                  key: DOCKER_PASSWORD
            - name: AUTH0_CLIENT_ID
              valueFrom:
                secretKeyRef:
                  name: faas-api-secret
                  key: AUTH0_CLIENT_ID
            - name: AUTH0_DOMAIN
              valueFrom:
                secretKeyRef:
                  name: faas-api-secret
                  key: AUTH0_DOMAIN
            - name: AUTH0_CLIENT_SECRET
              valueFrom:
                secretKeyRef:
                  name: faas-api-secret
                  key: AUTH0_CLIENT_SECRET
            - name: AUTH0_CALLBACK_URL
              valueFrom:
                secretKeyRef:
                  name: faas-api-secret
                  key: AUTH0_CALLBACK_URL
          resources:
            requests:
              memory: "64Mi"
              cpu: "250m"
            limits:
              memory: "128Mi"
              cpu: "500m"
      volumes:
        - name: dind-data
          emptyDir: {}
---
apiVersion: v1
kind: Service
metadata:
  name: faas-api
  labels:
    app: faas-api
spec:
  ports:
    - port: 8090
      targetPort: 8090
  selector:
    app: faas-api
  type: ClusterIP
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: faas-html
data:
  index.html: |
    <!DOCTYPE html>
    <html>
    <head>
      <title>Simple FaaS FE</title>
    </head>
    <body>
      <h1>Welcome to the Simple FaaS FE</h1>
      <p>This is a simple FaaS FE.</p>
    </body>
    </html>
---
apiVersion: v1
kind: Service
metadata:
  name: faas-frontend
  labels:
    app: faas-frontend
spec:
  ports:
    - port: 80
      targetPort: 80
  selector:
    app: faas-frontend
  type: ClusterIP
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: faas-ingress
spec:
  ingressClassName: nginx
  rules:
    - host: www.faas.test
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: faas-frontend
                port:
                  number: 80
          - path: /api
            pathType: Prefix
            backend:
              service:
                name: faas-api
                port:
                  number: 8090
---

