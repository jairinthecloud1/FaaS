---
#simple deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: faas-frontend
  labels:
    app: faas-frontend
spec:
  replicas: 1
  selector:
    matchLabels:
      app: faas-frontend
  template:
    metadata:
      labels:
        app: faas-frontend
    spec:
      containers:
        - name: faas-frontend
          image: nginx:1.14.2
          ports:
            - containerPort: 80
          resources:
            requests:
              memory: "64Mi"
              cpu: "250m"
            limits:
              memory: "128Mi"
              cpu: "500m"
          volumeMounts:
            - name: faas-html
              mountPath: /usr/share/nginx/html
      volumes:
        - name: faas-html
          configMap:
            name: faas-html
---
# -----------------------------------------------------------------------------
# ConfigMap with environment variables for faas-api
# -----------------------------------------------------------------------------
apiVersion: v1
kind: ConfigMap
metadata:
  name: faas-api-env
data:
  # Adjust this to your registry endpoint as needed
  DOCKER_REGISTRY: "harbor.default.svc.cluster.local"
---
# -----------------------------------------------------------------------------
# Secret with Docker credentials for faas-api
# (Both values are Base64-encoded "admin")
# -----------------------------------------------------------------------------
apiVersion: v1
kind: Secret
metadata:
  name: faas-api-secret
type: Opaque
data:
  DOCKER_USERNAME: YWRtaW4=
  DOCKER_PASSWORD: YWRtaW4=
---
# -----------------------------------------------------------------------------
# Deployment with Docker-in-Docker (DinD) sidecar + faas-api container
# -----------------------------------------------------------------------------
apiVersion: apps/v1
kind: Deployment
metadata:
  name: faas-api
spec:
  replicas: 1
  selector:
    matchLabels:
      app: faas-api
  template:
    metadata:
      labels:
        app: faas-api
    spec:
      # The Pod will contain two containers: "dind" and "faas-api"
      serviceAccountName: faas-api
      containers:
        - name: dind
          image: docker:20.10-dind
          # Privileged is required for DinD to start its own Docker daemon
          securityContext:
            privileged: true
          # Disables TLS in Docker-in-Docker; it will listen on tcp://0.0.0.0:2375
          env:
            - name: DOCKER_TLS_CERTDIR
              value: ""
          # Persist Docker's working data if needed
          volumeMounts:
            - name: dind-data
              mountPath: /var/lib/docker
          args:
            - --insecure-registry=harbor.default.svc.cluster.local
            - --insecure-registry=registry.faas.test
            - --insecure-registry=harbor

        - name: faas-api
          image: jairjosafath/faas-api:latest
          ports:
            - containerPort: 8090
          envFrom:
            - configMapRef:
                name: faas-api-env
          env:
            # Tell the docker client library to speak to the sidecar's daemon
            - name: DOCKER_HOST
              value: tcp://localhost:2375
            - name: DOCKER_USERNAME
              valueFrom:
                secretKeyRef:
                  name: faas-api-secret
                  key: DOCKER_USERNAME
            - name: DOCKER_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: faas-api-secret
                  key: DOCKER_PASSWORD
          resources:
            requests:
              memory: "64Mi"
              cpu: "250m"
            limits:
              memory: "128Mi"
              cpu: "500m"

      # Volume for DinD to store its /var/lib/docker directory
      volumes:
        - name: dind-data
          emptyDir: {}
---
#simple service for a go app
apiVersion: v1
kind: Service
metadata:
  name: faas-api
  labels:
    app: faas-api
spec:
  ports:
    - port: 8090
      targetPort: 8090
  selector:
    app: faas-api
  type: ClusterIP
---
#simple configmap with custom html
apiVersion: v1
kind: ConfigMap
metadata:
  name: faas-html
data:
  index.html: |
    <!DOCTYPE html>
    <html>
    <head>
      <title>Simple FaaS FE</title>
    </head>
    <body>
      <h1>Welcome to the Simple FaaS FE</h1>
      <p>This is a simple FaaS FE.</p>
    </body>
    </html>
---
#simple service
apiVersion: v1
kind: Service
metadata:
  name: faas-frontend
  labels:
    app: faas-frontend
spec:
  ports:
    - port: 80
      targetPort: 80
  selector:
    app: faas-frontend
  type: ClusterIP
---
#simple ingress
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: faas-ingress
spec:
  ingressClassName: nginx # Specify your ingress controller's class name here.
  rules:
    - host: www.faas.test # Replace with your Minikube IP or correct hostname.
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: faas-frontend
                port:
                  number: 80
          - path: /api
            pathType: Prefix
            backend:
              service:
                name: faas-api
                port:
                  number: 8090
    - host: registry.faas.test # Replace with your Minikube IP or correct hostname.
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: harbor
                port:
                  number: 80
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: faas-api-role
rules:
  - apiGroups: ["serving.knative.dev"]
    resources: ["services"]
    verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]
  - apiGroups: [""]
    resources: ["pods"]
    verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]
  - apiGroups: [""]
    resources: ["pods/log"]
    verbs: ["get", "list", "watch"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: faas-api-rolebinding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: faas-api-role
subjects:
  - kind: ServiceAccount
    name: faas-api
    namespace: default
